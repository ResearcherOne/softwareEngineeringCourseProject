/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 07 00:03:15 EET 2016
 */

package Entity;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import TileMap.TileMap;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      TileMap tileMap0 = new TileMap(7);
      Player player0 = new Player(tileMap0);
      player0.hit(7);
      int int0 = player0.getHealth();
      assertEquals(0, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-1809));
      tileMap0.setTween((-1809));
      Player player0 = new Player(tileMap0);
      tileMap0.draw((Graphics2D) null);
      player0.getMaxFire();
      tileMap0.loadMap((String) null);
      player0.hit((-790));
      player0.draw((Graphics2D) null);
      tileMap0.loadTiles("");
      player0.setScratching();
      player0.setGliding(false);
      player0.draw((Graphics2D) null);
      assertEquals(795, player0.getHealth());
  }

  @Test
  public void test02()  throws Throwable  {
      TileMap tileMap0 = new TileMap(3935);
      Player player0 = new Player(tileMap0);
      player0.hit(5);
      assertEquals(5, player0.getMaxHealth());
      assertEquals(0, player0.getHealth());
  }

  @Test
  public void test03()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-137));
      Player player0 = new Player(tileMap0);
      // Undeclared exception!
      try { 
        player0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("TileMap.TileMap", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-3575));
      Player player0 = new Player(tileMap0);
      Animation animation0 = player0.animation;
      BufferedImage bufferedImage0 = animation0.getImage();
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      player0.draw(sunGraphics2D0);
      assertEquals(30, bufferedImage0.getHeight());
      assertEquals(20, player0.getCHeight());
      assertEquals(2500, player0.getMaxFire());
      assertEquals(5, player0.getMaxHealth());
      assertEquals(20, player0.getCWidth());
      assertEquals(30, bufferedImage0.getWidth());
  }

  @Test
  public void test05()  throws Throwable  {
      TileMap tileMap0 = new TileMap(1552);
      Player player0 = new Player(tileMap0);
      Animation animation0 = player0.animation;
      BufferedImage bufferedImage0 = animation0.getImage();
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      animation0.setFrame(889);
      // Undeclared exception!
      try { 
        player0.draw(sunGraphics2D0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 889
         //
         assertThrownBy("Entity.Animation", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-381));
      Player player0 = new Player(tileMap0);
      // Undeclared exception!
      try { 
        player0.checkAttack((ArrayList<Enemy>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Entity.Player", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Player player0 = null;
      try {
        player0 = new Player((TileMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Entity.MapObject", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      TileMap tileMap0 = new TileMap(3935);
      Player player0 = new Player(tileMap0);
      // Undeclared exception!
      try { 
        player0.draw((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Entity.MapObject", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      TileMap tileMap0 = new TileMap(3935);
      Player player0 = new Player(tileMap0);
      player0.fallSpeed = (double) 1656;
      player0.jumping = true;
      // Undeclared exception!
      try { 
        player0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("TileMap.TileMap", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TileMap tileMap0 = new TileMap(3935);
      Player player0 = new Player(tileMap0);
      player0.jumping = true;
      // Undeclared exception!
      try { 
        player0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("TileMap.TileMap", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TileMap tileMap0 = new TileMap(55);
      Player player0 = new Player(tileMap0);
      player0.dx = (-2816.14);
      // Undeclared exception!
      try { 
        player0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("TileMap.TileMap", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TileMap tileMap0 = new TileMap(100);
      Player player0 = new Player(tileMap0);
      player0.setVector(785.6812635986, 210.0);
      // Undeclared exception!
      try { 
        player0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("TileMap.TileMap", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-137));
      Player player0 = new Player(tileMap0);
      player0.right = true;
      // Undeclared exception!
      try { 
        player0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("TileMap.TileMap", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-706));
      Player player0 = new Player(tileMap0);
      player0.left = true;
      // Undeclared exception!
      try { 
        player0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("TileMap.TileMap", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TileMap tileMap0 = new TileMap(2493);
      Player player0 = new Player(tileMap0);
      player0.hit((-989));
      player0.hit(795);
      assertEquals(994, player0.getHealth());
  }

  @Test
  public void test16()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-2999));
      Player player0 = new Player(tileMap0);
      ArrayList<Enemy> arrayList0 = new ArrayList<Enemy>();
      Enemy enemy0 = new Enemy(tileMap0);
      arrayList0.add(enemy0);
      player0.setScratching();
      player0.checkAttack(arrayList0);
      assertEquals(20, player0.getCHeight());
      assertEquals(5, player0.getHealth());
      assertEquals(30, player0.getWidth());
      assertEquals(2500, player0.getFire());
      assertEquals(30, player0.getHeight());
  }

  @Test
  public void test17()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-2999));
      Player player0 = new Player(tileMap0);
      ArrayList<Enemy> arrayList0 = new ArrayList<Enemy>();
      Enemy enemy0 = new Enemy(tileMap0);
      arrayList0.add(enemy0);
      player0.checkAttack(arrayList0);
      assertEquals(30, player0.getHeight());
      assertEquals(30, player0.getWidth());
      assertEquals(20, player0.getCWidth());
      assertEquals(5, player0.getMaxHealth());
      assertEquals(20, player0.getCHeight());
      assertEquals(2500, player0.getFire());
  }

  @Test
  public void test18()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-137));
      Player player0 = new Player(tileMap0);
      int int0 = player0.getMaxHealth();
      assertEquals(30, player0.getWidth());
      assertEquals(30, player0.getHeight());
      assertEquals(20, player0.getCHeight());
      assertEquals(2500, player0.getFire());
      assertEquals(5, int0);
      assertEquals(20, player0.getCWidth());
  }

  @Test
  public void test19()  throws Throwable  {
      TileMap tileMap0 = new TileMap(3935);
      Player player0 = new Player(tileMap0);
      player0.setFiring();
      assertEquals(30, player0.getWidth());
      assertEquals(30, player0.getHeight());
      assertEquals(20, player0.getCWidth());
      assertEquals(5, player0.getMaxHealth());
      assertEquals(20, player0.getCHeight());
      assertEquals(2500, player0.getFire());
  }

  @Test
  public void test20()  throws Throwable  {
      TileMap tileMap0 = new TileMap(3935);
      Player player0 = new Player(tileMap0);
      int int0 = player0.getHealth();
      assertEquals(20, player0.getCHeight());
      assertEquals(5, int0);
      assertEquals(30, player0.getWidth());
      assertEquals(2500, player0.getMaxFire());
      assertEquals(20, player0.getCWidth());
      assertEquals(30, player0.getHeight());
  }

  @Test
  public void test21()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-137));
      Player player0 = new Player(tileMap0);
      int int0 = player0.getFire();
      assertEquals(30, player0.getHeight());
      assertEquals(20, player0.getCHeight());
      assertEquals(2500, int0);
      assertEquals(20, player0.getCWidth());
      assertEquals(5, player0.getHealth());
      assertEquals(30, player0.getWidth());
  }
}
