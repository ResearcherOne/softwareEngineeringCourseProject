/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 06 23:23:48 EET 2016
 */

package TileMap;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.awt.Graphics2D;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class TileMap_ESTest extends TileMap_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      TileMap tileMap0 = new TileMap(1);
      int int0 = tileMap0.getTileSize();
      assertEquals(1, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      TileMap tileMap0 = new TileMap(1362);
      tileMap0.setPosition(0.0, 1362);
      assertEquals(1362, tileMap0.getTileSize());
      assertEquals(0.0, tileMap0.gety(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-2147483243));
      // Undeclared exception!
      try { 
        tileMap0.getType((-2147483243), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("TileMap.TileMap", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-1));
      tileMap0.loadTiles("");
      assertEquals(-1, tileMap0.getTileSize());
  }

  @Test
  public void test04()  throws Throwable  {
      TileMap tileMap0 = new TileMap(892);
      tileMap0.loadMap("");
      assertEquals(892, tileMap0.getTileSize());
  }

  @Test
  public void test05()  throws Throwable  {
      TileMap tileMap0 = null;
      try {
        tileMap0 = new TileMap(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         assertThrownBy("TileMap.TileMap", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-1));
      tileMap0.draw((Graphics2D) null);
      assertEquals(-1, tileMap0.getTileSize());
  }

  @Test
  public void test07()  throws Throwable  {
      TileMap tileMap0 = new TileMap(892);
      tileMap0.draw((Graphics2D) null);
      assertEquals(892, tileMap0.getTileSize());
  }

  @Test
  public void test08()  throws Throwable  {
      TileMap tileMap0 = new TileMap(1);
      tileMap0.setPosition(1, 1);
      assertEquals(0.0, tileMap0.getx(), 0.01D);
      assertEquals(1, tileMap0.getTileSize());
      assertEquals(0.0, tileMap0.gety(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-2147483243));
      tileMap0.setPosition((-2147483243), (-2147483243));
      assertEquals(0.0, tileMap0.getx(), 0.01D);
      assertEquals(-2147483243, tileMap0.getTileSize());
      assertEquals(0.0, tileMap0.gety(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      TileMap tileMap0 = new TileMap(892);
      int int0 = tileMap0.getWidth();
      assertEquals(892, tileMap0.getTileSize());
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-1));
      tileMap0.gety();
      assertEquals(-1, tileMap0.getTileSize());
  }

  @Test
  public void test12()  throws Throwable  {
      TileMap tileMap0 = new TileMap(892);
      tileMap0.getx();
      assertEquals(892, tileMap0.getTileSize());
  }

  @Test
  public void test13()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-1));
      int int0 = tileMap0.getTileSize();
      assertEquals((-1), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      TileMap tileMap0 = new TileMap(3533);
      tileMap0.setPosition(0.0, 0.0);
      assertEquals(3533, tileMap0.getTileSize());
  }

  @Test
  public void test15()  throws Throwable  {
      TileMap tileMap0 = new TileMap(892);
      tileMap0.setTween(0.0);
      assertEquals(892, tileMap0.getTileSize());
  }

  @Test
  public void test16()  throws Throwable  {
      TileMap tileMap0 = new TileMap((-2147483243));
      int int0 = tileMap0.getHeight();
      assertEquals(-2147483243, tileMap0.getTileSize());
      assertEquals(0, int0);
  }
}
